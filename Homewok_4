insertNode(node, newNode) {
        if (newNode.key < node.key) {
            if (node.left === null) {
                node.left = newNode;
                this.num_nodes++;
            } else {
                node.left = this.insertNode(node.left, newNode);
            }
        } else if (newNode.key > node.key) {
            if (node.right === null) {
                node.right = newNode;
                this.num_nodes++;
            } else {
                node.right = this.insertNode(node.right, newNode);
            }
        } else {
            node.value = newNode.value;
        }
        return node;
    }

searchNode(node, key) {
        if (node === null) {
            return null;
        }
        if (key < node.key) {
            return this.searchNode(node.left, key);
        } else if (key > node.key) {
            return this.searchNode(node.right, key);
        } else {
            return node;
        }
    }

min() {
        if (this.root === null) {
            return null;
        }
        let currentNode = this.root;
        while (currentNode.left !== null) {
            currentNode = currentNode.left;
        }
        return currentNode;
    }

max() {
        if (this.root === null) {
            return null;
        }
        let currentNode = this.root;
        while (currentNode.right !== null) {
            currentNode = currentNode.right;
        }
        return currentNode;
    }

    length() {
        return this.num_nodes;
    }
